Index: Software/src/Main.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//fun main() {\r\n//    TUI.init()\r\n//    TUI.capture()\r\n//}\r\nfun main(){\r\n    TUI.init()\r\n    TUI.writeWalkText(\"O ian e gay\")\r\n}\r\n/*\r\nvar read = false\r\n\r\nthread {\r\n    readln()\r\n    read = true\r\n}\r\nTUI.loadingScreen(500L) { read }\r\n*/\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Software/src/Main.kt b/Software/src/Main.kt
--- a/Software/src/Main.kt	(revision 3b4f4f9964f2d60e4df9ba8b906bd98c9a765c0d)
+++ b/Software/src/Main.kt	(date 1747774127147)
@@ -3,8 +3,12 @@
 //    TUI.capture()
 //}
 fun main(){
+    RouletteDisplay.init()
+    RouletteDisplay.off(false)
+    RouletteDisplay.setValue(12345678)
     TUI.init()
     TUI.writeWalkText("O ian e gay")
+
 }
 /*
 var read = false
Index: Software/Simul.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#Wed May 14 23:19:57 WEST 2025\r\nD0=667,237\r\nD0_ICON=true\r\nD0_SIZE=150,212\r\nD0_TIES=false\r\nD1=539,237\r\nD1_ICON=true\r\nD1_SIZE=150,212\r\nD1_TIES=false\r\nD2=411,237\r\nD2_ICON=true\r\nD2_SIZE=150,212\r\nD2_TIES=false\r\nD3=283,238\r\nD3_ICON=true\r\nD3_SIZE=150,212\r\nD3_TIES=false\r\nD4=155,238\r\nD4_ICON=true\r\nD4_SIZE=150,212\r\nD4_TIES=false\r\nD5=26,238\r\nD5_ICON=true\r\nD5_SIZE=150,212\r\nD5_TIES=false\r\nScore\\ Display=85,346\r\nScore\\ Display_SIZE=157,334\r\nSimDig=-7,-7\r\nSimDig_SIZE=1550,878\r\nUsbPort=22,363\r\nUsbPort_ICON=true\r\nca=240,139\r\nca_ICON=true\r\nca_SIZE=301,89\r\nd7s=284,1\r\ndec=160,1\r\ndl=987,57\r\ndl_ICON=false\r\nkbd=17,4\r\nkbd_ICON=true\r\nkbd_SIZE=224,246\r\nkbd_TIES=false\r\nkit=105,227\r\nlcd=242,8\r\nlcd_SIZE=480,143\r\nlcd_TIES=false\r\nm=572,149\r\nm_ICON=true\r\nm_SIZE=150,75\r\nm_TIES=false\r\nob=1270,340\r\nob_ICON=true\r\nrb=1426,652\r\nrb_ICON=true\r\nrb_SIZE=242,220\r\nrdispatch=915,70\r\nrdispatch_ICON=true\r\nrdisplay_ICON=true\r\nrdisplay_SIZE=150,307\r\nsc=29,744\r\nsc_SIZE=243,307\r\nsd=1229,579\r\nsd_SIZE=150,307\r\nsrl=959,351\r\nsrl_ICON=false\r\nsrr=255,738\r\nsrr_ICON=true\r\nsrr_SIZE=261,307\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/Software/Simul.properties b/Software/Simul.properties
--- a/Software/Simul.properties	(revision 3b4f4f9964f2d60e4df9ba8b906bd98c9a765c0d)
+++ b/Software/Simul.properties	(date 1747770454873)
@@ -1,26 +1,26 @@
-#Wed May 14 23:19:57 WEST 2025
+#Tue May 20 20:47:34 WEST 2025
 D0=667,237
-D0_ICON=true
+D0_ICON=false
 D0_SIZE=150,212
 D0_TIES=false
 D1=539,237
-D1_ICON=true
+D1_ICON=false
 D1_SIZE=150,212
 D1_TIES=false
 D2=411,237
-D2_ICON=true
+D2_ICON=false
 D2_SIZE=150,212
 D2_TIES=false
 D3=283,238
-D3_ICON=true
+D3_ICON=false
 D3_SIZE=150,212
 D3_TIES=false
 D4=155,238
-D4_ICON=true
+D4_ICON=false
 D4_SIZE=150,212
 D4_TIES=false
 D5=26,238
-D5_ICON=true
+D5_ICON=false
 D5_SIZE=150,212
 D5_TIES=false
 Score\ Display=85,346
@@ -55,7 +55,7 @@
 rb_SIZE=242,220
 rdispatch=915,70
 rdispatch_ICON=true
-rdisplay_ICON=true
+rdisplay_ICON=false
 rdisplay_SIZE=150,307
 sc=29,744
 sc_SIZE=243,307
Index: Software/src/SerialEmitter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import isel.leic.utils.Time\r\nimport java.io.File\r\nimport java.util.logging.Level\r\nimport java.util.logging.Logger\r\n\r\n// Envia tramas para os diferentes módulos Serial Receiver.\r\nobject SerialEmitter {\r\n    enum class Destination {\r\n        LCD, ROULETTE\r\n    }\r\n\r\n    var SS_LCD_ID = 0\r\n    var SDX_LCD_ID = 3\r\n    var SCLK_LCD_ID = 4\r\n\r\n    // Inicia a classe\r\n    fun init() {\r\n        HAL.init()\r\n        HAL.setBits(1)\r\n\r\n        try {\r\n            val file = File(HAL.configPath)\r\n            SS_LCD_ID = 0\r\n            SDX_LCD_ID = 0\r\n            SCLK_LCD_ID = 0\r\n\r\n            file.forEachLine { i ->\r\n                if (i.contains(\"srl./SS\")) {\r\n                    SS_LCD_ID += getOutputPins(i)\r\n                } else if (i.contains(\"srl.SDX\")) {\r\n                    SDX_LCD_ID += getOutputPins(i)\r\n                } else if (i.contains(\"srl.SCLK\")) {\r\n                    SCLK_LCD_ID += getOutputPins(i)\r\n                }\r\n            }\r\n        } catch(e:Exception){\r\n            Logger.getLogger(\"SerialEmitter\").log(Level.WARNING, \"No config file found, using default values\")\r\n        }\r\n    }\r\n\r\n    private fun sendLCD(data: Int, size: Int) {\r\n\r\n        val time = 1L\r\n        HAL.clrBits(1)\r\n        // Time.sleep(time)\r\n\r\n        val p = if (data.countOneBits() % 2 == 0) 1 else 0\r\n\r\n        for (i in 0..size){\r\n            if (i == size) {\r\n                if (p.isBit(0))\r\n                    HAL.setBits(pow(2, 3))\r\n                else\r\n                    HAL.clrBits(pow(2, 3))\r\n            }\r\n            else {\r\n                if (data.isBit(i)) {\r\n                    HAL.setBits(pow(2, 3))\r\n                }\r\n                else {\r\n                    HAL.clrBits(pow(2, 3))\r\n                }\r\n            }\r\n\r\n            //Time.sleep(time)\r\n\r\n            HAL.setBits(pow(2, 4))\r\n\r\n            //Time.sleep(time)\r\n\r\n            HAL.clrBits(pow(2, 4))\r\n\r\n            //Time.sleep(time)\r\n        }\r\n\r\n        HAL.setBits(1)\r\n\r\n        //Time.sleep(time)\r\n\r\n    }\r\n\r\n    // Envia uma trama para o Serial Receiver\r\n    // identificado no destino em ‘addr’,\r\n    // os bits de dados em ‘data’\r\n    // e em ‘size’ o número de bits a enviar.\r\n    fun send(addr: Destination, data: Int, size: Int) {\r\n        if (addr == Destination.LCD) {\r\n            sendLCD(data, size)\r\n        } else if (addr == Destination.ROULETTE) {\r\n            HAL.clrBits(pow(2, 0))\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Software/src/SerialEmitter.kt b/Software/src/SerialEmitter.kt
--- a/Software/src/SerialEmitter.kt	(revision 3b4f4f9964f2d60e4df9ba8b906bd98c9a765c0d)
+++ b/Software/src/SerialEmitter.kt	(date 1747770426705)
@@ -8,6 +8,7 @@
     enum class Destination {
         LCD, ROULETTE
     }
+    var LCD_delay = 1L
 
     var SS_LCD_ID = 0
     var SDX_LCD_ID = 3
@@ -39,10 +40,40 @@
     }
 
     private fun sendLCD(data: Int, size: Int) {
+        HAL.clrBits(pow(2, 0))
+        HAL.setBits(pow(2, 1))
+
+        parseAndSend(data, size, LCD_delay)
+
+        HAL.setBits(pow(2, 0))
+        HAL.clrBits(pow(2, 1))
+
+    }
 
-        val time = 1L
-        HAL.clrBits(1)
-        // Time.sleep(time)
+    private fun sendRoulette(data: Int, size: Int) {
+        HAL.setBits(pow(2, 0))
+        HAL.clrBits(pow(2, 1))
+
+        parseAndSend(data, size)
+
+        HAL.clrBits(pow(2, 0))
+        HAL.setBits(pow(2, 1))
+    }
+
+    // Envia uma trama para o Serial Receiver
+    // identificado no destino em ‘addr’,
+    // os bits de dados em ‘data’
+    // e em ‘size’ o número de bits a enviar.
+    fun send(addr: Destination, data: Int, size: Int) {
+        if (addr == Destination.LCD) {
+            sendLCD(data, size)
+        } else if (addr == Destination.ROULETTE) {
+            sendRoulette(data, size)
+        }
+    }
+
+    fun parseAndSend(data: Int, size: Int, time: Long = 0) {
+        Time.sleep(time)
 
         val p = if (data.countOneBits() % 2 == 0) 1 else 0
 
@@ -62,32 +93,15 @@
                 }
             }
 
-            //Time.sleep(time)
+            Time.sleep(time)
 
             HAL.setBits(pow(2, 4))
 
-            //Time.sleep(time)
+            Time.sleep(time)
 
             HAL.clrBits(pow(2, 4))
 
-            //Time.sleep(time)
-        }
-
-        HAL.setBits(1)
-
-        //Time.sleep(time)
-
-    }
-
-    // Envia uma trama para o Serial Receiver
-    // identificado no destino em ‘addr’,
-    // os bits de dados em ‘data’
-    // e em ‘size’ o número de bits a enviar.
-    fun send(addr: Destination, data: Int, size: Int) {
-        if (addr == Destination.LCD) {
-            sendLCD(data, size)
-        } else if (addr == Destination.ROULETTE) {
-            HAL.clrBits(pow(2, 0))
+            Time.sleep(time)
         }
     }
 }
Index: Software/src/RouletteDisplay.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Software/src/RouletteDisplay.kt b/Software/src/RouletteDisplay.kt
new file mode 100644
--- /dev/null	(date 1747774571846)
+++ b/Software/src/RouletteDisplay.kt	(date 1747774571846)
@@ -0,0 +1,63 @@
+import javax.swing.plaf.basic.BasicOptionPaneUI
+
+// Controla o mostrador de pontuação.
+object RouletteDisplay {
+
+    const val TOTAL_DISPLAYS = 8
+    const val MAX_VALUE = 15
+    const val CMD_SIZE = 3
+    const val TOTAL_SIZE = 6
+
+    val POS = listOf(
+        0b0000_0001,
+        0b0000_0010,
+        0b0000_0011,
+        0b0000_0100,
+        0b0000_0101
+    )
+
+    var cursor = 0
+
+    // Inicia a classe, estabelecendo os valores iniciais.
+    fun init() {
+        SerialEmitter.init()
+    }
+
+    // Realiza a animação do sorteio
+    fun animation() {
+        // TODO: Lógica de animação do sorteio
+    }
+
+    // Envia comando para atualizar o valor do mostrador da roleta
+    fun setValue(value: Int) {
+        if (value > MAX_VALUE) {
+            return
+        }
+
+        val display = value.toString(2).padStart(TOTAL_DISPLAYS, '0')
+        val command = display.map { it.toString().toInt() }.toIntArray()
+
+        SerialEmitter.send(
+            SerialEmitter.Destination.ROULETTE,
+            command,
+            TOTAL_SIZE
+        )
+    }
+
+    // Envia comando para desativar/ativar a visualização do mostrador da roleta
+    fun off(value: Boolean) {
+        if (value) {
+            SerialEmitter.send(
+                SerialEmitter.Destination.ROULETTE,
+                0b0000_0111,
+                8
+            )
+        } else {
+            SerialEmitter.send(
+                SerialEmitter.Destination.ROULETTE,
+                0b0000_1111,
+                8
+            )
+        }
+    }
+}
